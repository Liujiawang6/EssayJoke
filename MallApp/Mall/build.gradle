apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'android-aspectjx' // apply plugin

kapt {
    generateStubs = true
}

android {
    compileSdkVersion rootProject.ext.common.compileSdkVersion
    buildToolsVersion rootProject.ext.common.buildToolsVersion
    defaultConfig {
        applicationId "com.qiyei.mall"
        minSdkVersion rootProject.ext.common.minSdkVersion
        targetSdkVersion rootProject.ext.common.targetSdkVersion
        versionCode 1
        versionName "1.0"

        //ARouter
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [ AROUTER_MODULE_NAME : project.getName() ]
            }
        }

        /**
         * JPush
         */
        manifestPlaceholders = [
                JPUSH_PKGNAME : applicationId,
        ]

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        //分包
        multiDexEnabled true
    }


    /**
     * 签名配置
     */
    signingConfigs {
        //正式版签名
        release {
            keyAlias proj_keyAlias
            keyPassword proj_keyPassword
            storeFile file(project.getRootDir().getAbsolutePath() + proj_storeFile)
            storePassword proj_storePassword
        }

        //调试版签名
        debug {
            keyAlias proj_keyAlias
            keyPassword proj_keyPassword
            storeFile file(project.getRootDir().getAbsolutePath() + proj_storeFile)
            storePassword proj_storePassword
        }
    }

    buildTypes {
        debug {
            // 对齐zip
            zipAlignEnabled  = true
            // 删除无用资源
            shrinkResources  = false
            minifyEnabled false
            signingConfig signingConfigs.debug
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        release {
            // 对齐zip
            zipAlignEnabled  = true
            // 删除无用资源
            shrinkResources  = false
            minifyEnabled false
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    //指定jdk版本
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    lintOptions {
        abortOnError false
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation "androidx.constraintlayout:constraintlayout:1.1.3"

    implementation "androidx.recyclerview:recyclerview:1.1.0"
    implementation "androidx.multidex:multidex:2.0.1"
    implementation "androidx.cardview:cardview:1.0.0"

    //Dagger2
    kapt "com.google.dagger:dagger-compiler:$dagger_version"
//    kapt "com.google.dagger:dagger-android-processor:$dagger_version"

    //ARouter
    kapt "com.alibaba:arouter-compiler:$arouter_compiler_version"

    implementation ("org.jetbrains.anko:anko-commons:$anko_version", {
        exclude group: 'com.android.support'
    })

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"

    if(isMallLibrary.toBoolean()){
        implementation project(':Framework:Provider')
        implementation project(':MallApp:UserManager')
        implementation project(':MallApp:OrderManager')
        implementation project(':MallApp:GoodsManager')
        implementation project(':MallApp:MessageManager')
        implementation project(':MallApp:PayManager')
    }

    testImplementation "junit:junit:4.12"
    androidTestImplementation "androidx.test:runner:1.2.0"
    androidTestImplementation "androidx.test.espresso:espresso-core:3.2.0"

}

def releaseTime() {
    // return new Date().format("yyyyMMdd", TimeZone.getTimeZone("UTC")) //年月日
    return new Date().format("yyyy-MM-dd-HH-mm-ss", TimeZone.getTimeZone("GMT+8:00")) //年月日时分秒
}

android.applicationVariants.all { variant ->
    //如果是release版本
    if (variant.buildType.name == 'release') {
        variant.outputs.all{ output ->
            //查找所有的apk
            if (outputFileName.endsWith('.apk')) {
                def index = outputFileName.indexOf(".")
                def prefix = outputFileName.substring(0,index)
                def suffix = outputFileName.substring(index)
                //重新定义apk的名称: 工程名 + 版本号 + 生成时间
                def fileName = prefix + "_V${android.defaultConfig.versionName}_${releaseTime()}" + suffix
                //outputFile.parent参数可以改成你你想要的发布路径
                outputFileName = fileName
            }
        }
    }
}
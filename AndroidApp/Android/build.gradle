apply plugin: 'com.android.application'
apply plugin: 'android-aspectjx' // apply plugin

android {
    compileSdkVersion rootProject.ext.common.compileSdkVersion
    buildToolsVersion rootProject.ext.common.buildToolsVersion

    defaultConfig {
        applicationId "com.qiyei.android"
        minSdkVersion rootProject.ext.common.minSdkVersion
        targetSdkVersion rootProject.ext.common.targetSdkVersion
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        //分包
        multiDexEnabled true
        multiDexKeepProguard file("multiDexKeep.pro")

        //ndk配置
        ndk {
            abiFilters 'armeabi-v7a'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
        encoding "UTF-8"
    }


    /**
     * 签名配置
     */
    signingConfigs {
        //正式版签名
        release {
            keyAlias proj_keyAlias
            keyPassword proj_keyPassword
            storeFile file(project.getRootDir().getAbsolutePath() + proj_storeFile)
            storePassword proj_storePassword
        }

        //调试版签名
        debug {
            keyAlias proj_keyAlias
            keyPassword proj_keyPassword
            storeFile file(project.getRootDir().getAbsolutePath() + proj_storeFile)
            storePassword proj_storePassword
        }
    }

    buildTypes {
        debug {
            // 对齐zip
            zipAlignEnabled  = true
            // 删除无用资源
            shrinkResources  = false
            minifyEnabled false
            signingConfig signingConfigs.debug
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        release {
            // 对齐zip
            zipAlignEnabled  = true
            // 删除无用资源
            shrinkResources  = false
            minifyEnabled false
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

    }

    sourceSets {
        main {
            jni.srcDirs = ['src/main/jni', 'src/main/cpp/']
            jniLibs.srcDirs = ['libs']  //配置生成jniLibs
        }
    }

    //解决国际化资源文件不全
    lintOptions {
        checkReleaseBuilds false
        abortOnError false
    }
    aaptOptions { 
        cruncherEnabled = false
    }
}

aspectjx {
    //开启AspectJX功能
    enabled true
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation "androidx.constraintlayout:constraintlayout:1.1.3"

//    annotationProcessor "androidx.lifecycle:lifecycle-compiler:2.1.0"
    implementation "androidx.lifecycle:lifecycle-common-java8:2.1.0"

    implementation "androidx.multidex:multidex:2.0.1"

    api project(':AndroidApp:UI')
    api project(':AndroidApp:OpenSource')
    api project(':AndroidApp:Architecture')
    api project(':AndroidApp:Performance')
    api project(':AndroidApp:Media')
    api project(':AndroidApp:NDK')

    testImplementation "junit:junit:4.12"
    androidTestImplementation "androidx.test:runner:1.2.0"
    androidTestImplementation "androidx.test.espresso:espresso-core:3.2.0"

}

def releaseTime() {
    // return new Date().format("yyyyMMdd", TimeZone.getTimeZone("UTC")) //年月日
    return new Date().format("yyyy-MM-dd-HH-mm-ss", TimeZone.getTimeZone("GMT+8:00")) //年月日时分秒
}

android.applicationVariants.all { variant ->
    //如果是release版本
    if (variant.buildType.name == 'release') {
        variant.outputs.all{ output ->
            //查找所有的apk
            if (outputFileName.endsWith('.apk')) {
                def index = outputFileName.indexOf(".")
                def prefix = outputFileName.substring(0,index)
                def suffix = outputFileName.substring(index)
                //重新定义apk的名称: 工程名 + 版本号 + 生成时间
                def fileName = prefix + "_V${android.defaultConfig.versionName}_${releaseTime()}" + suffix
                //outputFile.parent参数可以改成你你想要的发布路径
                outputFileName = fileName
            }
        }
    }
}

//afterEvaluate {
//    tasks.matching {
//        it.name.startsWith('dex')
//    }.each { dx ->
//        def listFile = project.rootDir.absolutePath+'/AndroidApp/Android/maindexlist.txt'
//        if (dx.additionalParameters == null) {
//            dx.additionalParameters = []
//        }
//        //表示当方法数越界时则生成多个dex文件（我的没有越界，貌似也生成了两个）
//        dx.additionalParameters += '--multi-dex'
//        //这个指定了listFile中的类（即maindexlist.txt中的类）会打包到主dex中，不过注意下一条。
//        dx.additionalParameters += '--main-dex-list=' +listFile
//        //表明只有-main-dex-list所指定的类（在我的配置中，就是app目录下的maindexlist.txt中包含的类）才能打包到主dex中，如果没有这个选项，上个选项就会失效
//        dx.additionalParameters += '--minimal-main-dex'
//    }
//}
